Pattern of Sliding Window Algorithm:

            int res = 0;
            //declare data structure (May use all kinds of data structures)

            for (int left = 0, right = 0; right < A.length; right++) {
                 //#1.Add element at A[right] to window, using the logic specified by problem (adding to sum etc)
                 //   Adjust related data structure and variables.

                 //#2.Based on problem requirement, do WHILE for condtion that the window property is FALSE.
                 //   So essentially, as long as the window property is no hold, we will keep moving the left side
                 //   until the window property is true again.
                 //   Implicitly, it also means that we will continue the "for" loop as long as the window property
                 //   holds TRUE, meaning keep moving the right side of the window.
                 while (condition is FALSE) {
                    //remove element at A[left]
                    //adjust related data structure and variables
                    left++;
                 }

                 //#3.After step #2, we are sure that window property is TRUE here, then this is the place to update
                 //   the min/max length of the window.
                 res = Math.max(res, right - left + 1);
             }


# Sliding Window
LE_209_Minimum_Size_Subarray_Sum
LE_862_Shortest_Subarray_With_Sum_At_Least_K
LE_904_Fruit_Into_Baskets
LE_930_Binary_Subarrays_With_Sum
LE_992_Subarrays_With_K_Different_Integers
LE_1004_Max_Consecutive_Ones_III
1234 Replace the Substring for Balanced String
LE_1248_Count_Number_Of_Nice_Subarrays
1358 Number of Substrings Containing All Three Characters
1425 Constrained Subsequence Sum
LE_1438_Longest_Continuous_Subarray_With_Absolute_Diff_Less_Than_Or_Equal_To_Limit
LE_1477_Find_Two_Non_Overlapping_Sub_Arrays_Each_With_Target_Sum