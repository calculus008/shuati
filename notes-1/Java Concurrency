# Concept
## Deadlock:
A deadlock occurs when two or more processes or threads are waiting for each other to release resources,
creating a circular dependency. As a result, none of the processes can proceed. This situation is common
in concurrent systems.

DeadlockExample
AvoidDeadlockExample

### A deadlock occurs when the following four conditions are simultaneously present:
Mutual Exclusion: Resources involved must be non-shareable, meaning only one process can use a resource at a time.
Hold and Wait: A process holding a resource is waiting for additional resources that are held by other processes.
No Preemption: Resources cannot be forcibly taken from a process; they must be released voluntarily.
Circular Wait: A closed chain of processes exists where each process is waiting for a resource held by the next
               process in the chain.

## Race Condition:
A race condition happens when two or more threads or processes access shared data concurrently, and the
outcome depends on the order of execution. If not managed properly, it can lead to inconsistent results
or unexpected behavior. Proper synchronization is needed to avoid race conditions.

## Difference between Thread and Runnable
1. Subclassing Thread:
How: Extend the Thread class and override the run() method.
Pros: Easier to implement if no other superclass is needed.
Cons: Restricts inheritance since Java supports single inheritance.

2. Implementing Runnable:
How: Implement the Runnable interface and pass it to a Thread object.
Pros: More flexible, separates task from thread management, allows for multiple inheritance
      (can extend another class).
Cons: Slightly more complex to implement.
Preferred: Use Runnable for better flexibility and design separation.



Scheduler
SimpleSchedulerOriginal
SimpleSchedulerWithSync
SimpleSchedulerWithSyncPractice
SimpleSchedulerWithLock
SimpleSchedulerWithReentrantLock

Concurrent_Request_Limit               ******
AppleTVSystemUpdater_thread_safe

BlockQueue (with syncronize and locks) *****
Bounded_Blocking_Queue
Bounded_Blocking_Queue_With_Lock
LE_1188_Design_Bounded_Blocking_Queue
Producer_Consumer

H2O
LE_1117_Building_H2O

CustomizedHashMap                      *****
ExpiringMap                            *****

LE_1242_Web_Crawler_Multithreaded      *****
LE_362_Design_Hit_Counter              *****