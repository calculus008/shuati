# BFS and DFS

## DFS Permutation:
* Pass in : container (StringBuilder ot List)
* Base case: string of StringBuilder length reaches the end, visited
* for loop to iterate each element (from idx 0 to end), check if visited, add, set visited, recursion call, unset visited, then remove.
* variation, if there are duplicates -> dedup : sorting, => "if (i > 0 && nums[i] == nums[i - 1] && !visited[i - 1])"
* Time : O(n * n!), this is an approximation, Space: O(n), for recursion call stack
LE_46_Permutation          (Distinct)
LE_47_Permutation_II       (With duplicates)
LE_17_Letter_Combinations_Of_A_Phone_Number  (a special case of permutation, elements on each level are different, no need to check visited)


## DFS subset
* No base case for return, add elements in each recursion call
* need to pass in cur idx (or start), then iterate from that idx to end
* for each iteration, add element, recursion, then remove element
* if there's duplicates -> dedup: sorting => "if (i != start && nums[i] == nums[i - 1]) continue"
* Time : O(n * 2 ^ n), Space : O(n)
LE_78_Subsets                    distinct
LE_90_Subsets_II                 duplicate
LE_39_Combination_Sum            distinct, same number can be used multiple times, all positive numbers
                                 minus on target for each recursion call
                                 base case: target < 0 or sum == target
                                 use sorting to do pruning, idx not increase when calling recusion
LE_40_Combination_SUM_II         duplicate, all positive numbers, dedup -> sorting, then "if (i != start_idx && nums[i] == nums[i - 1]) continue"
                                 sorting can also prune, return early - "if (candidates[i] > target) return;" in branching loop
LE_216_Combination_Sum_III       use 1 - 9, no duplicate, only use k of them, and no duplicate number can be used in the result.
                                 base case : target == 0 or all k numbers are used: k == 0 && n == 0
                                 idx increases by 1 when calling recursion
LE_377_Combination_Sum_IV        can use DFS, but better use recursion or DP



## Backtracking in Matrix
* Use a 2D array as visited
* Base case: mem or visited is already set
* branching into 4 directions, check if new coordinate is valid (within matrix and meet requirement)
* get return value, get min or max, then return 1+ret
LE_329_Longest_Increasing_Path_In_A_Matrix                                                  *****


# BFS find shorted path to a final state
LE_773_Sliding_Puzzle                   (hard)
LE_752_Open_The_Lock                    (hard)
LE_675_Cut_Off_Trees_For_Golf_Event     (hard)
LE_742_Closest_Leaf_In_A_Binary_Tree
LE_943_Find_The_Shortest_Superstring
LE_847_Shortest_Path_Visiting_All_Nodes
LE_864_Shortest_Path_To_Get_All_Keys


## BackTracking with DFS
LE_417_Pacific_Atlantic_Water_Flow      Set status in a matrix based on conditions in DFS    *****
LE_301_Remove_Invalid_Parentheses       (hard)
LE_282_Expression_Add_Operators         (hard)
LE_494_Target_Sum                       *****  Simpler version of LE_282_Expression_Add_Operators, use fixed numbers in a list
                                               no '*', only '+' and '-'. Can use DFS, better one is DP


## DFS for grouping (islands, friends etc), can also be solved by UnionFind
LE_200_Number_Of_Islands                count number
LE_547_Friend_Circles                   count number   *****
LE_695_Max_Area_Of_Island               get area size, so set val = 1 and keep adding from recursion calls and return val.  *****
                    (hard)
LE_733_Flood_Fill


## DFS search for something (min length...)
LE_753_Cracking_The_Safe               (hard)      search for min length
LE_749_Contain_Virus                   (hard)
LE_815_Bus_Routes                      (hard)
LE_841_Keys_And_Rooms                  Graph + DFS            *****


## DFS: find out if a group of numbers can be divided into
LE_473_Matchsticks_To_Square               (hard)
LE_698_Partition_To_K_Equal_Sum_Subsets                       *****


## BFS/DFS  Word problems
LE_127_Word_Ladder                    (hard)                BFS only, find the shortest transformation path, emphasis on branching function (replace one char in word)       *****
LE_126_Word_Ladder_II                 (hard)                BFS first, then DFS
LE_79_Word_Search                                           DFS                     *****
LE_212_Word_Search_II                 (hard)                Trie or HashMap + DFS
LE_51_N_Queens                        (hard)



## Dijskra
LE_787_Cheapest_Flights_Within_K_Stops  (Dijskra)


## New Problems
LE_967_Numbers_With_Same_Consecutive_Differences                      DFS or BFS
LE_863_All_Nodes_Distance_K_In_Binary_Tree                            DFS + BFS
LE_329_Longest_Increasing_Path_In_A_Matrix                  (hard)    DFS or DP                  *****
LE_801_Minimum_Swaps_To_Make_Sequences_Increasing           (hard)    DFS or DP


## Graph DFS
LE_332_Reconstruct_Itinerary                                DFS + Heap                           *****
LE_690_Employee_Importance                                  DFS + hashmap                        *****

## Construct weighed directed graph and DFS
LE_399_Evaluate_Division                                    Graph + DFS                          *****

## Detect loop in graph
LE_802_Find_Eventual_Safe_States                            Graph + DFS                          *****

* 488 Zuma Game
* 818 Race Car

## Apple
LE_200_Number_Of_Islands
LE_207_Course_Schedule
LE_339_Nested_List_Weight_Sum
LE_472_Concatenated_Words
LE_565_Array_Nesting