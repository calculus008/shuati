#
given two lists of non overlapping intervals，输出它们的交集
LE_986_Interval_List_Intersections
利口酒吧溜变种。输入是多个list，不是两个list。只想得出来两个两个找然后merge。
K_Interval_Lists_Intersections
LI_577_Merge_K_Sorted_Interval_Lists

#
说有一些整数，知道最大最小值，并可以调用两个API，输入整数x，返回数字中大于等于或者小于等于x的个数。问题是求中位数
题不难，面试官很看中对思路的描述，希望你把完整的算法清晰的解释出来再开始，而不是一上来就xjb码
Find_Median

#
第一轮是个难呀桑歌 斯刘伶
第二轮是个难呀桑歌 散耳 写完了 感觉使坏 又让写了个 饿饿

LE_460_LFU_Cache
LE_32_Longest_Valid_Parentheses
LE_22_Generate_Parentheses
LE_33_Search_In_Rotated_Sorted_Array

#
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).
用二分法开写，写了约80%时，面试官打断说不用写了，基本逻辑正确，后然就开始问扩展问题
LE_33_Search_In_Rotated_Sorted_Array

扩展问题是，数组特别大怎么办？大到内存放不下，一台机器放不下怎么办？
我给的方法是存成固定size的2G大小文件，记录每个文件的起始数值，就能判断到底要把哪个文件load进内存，然后用二分法找了

LE_49_Group_Anagrams
LE_146_LRU_Cache
LE_284_Peeking_Iterator

#
问题是serialize一个树，我做算法题习惯了用python，一看这个题应该偏工程实现而不是算法，就换成了c++，对方心花怒放，看来是换对了😂
因为每个节点的data和字节点的数目都需要用一个整数来encode长度，被问了怎用做更节省空间。我说了下我知道的一个varint编码算法，
应该是protobuf和leveldb都用了的，对方表示满意
LE_297_Serialize_And_Deserialize_Binary_Tree
LE_428_Serialize_And_Deserialize_Nary_Tree
LE_449_Serialize_And_Deserialize_BST
LE_331_Verify_Preorder_Serialization_Of_A_Binary_Tree


https://www.1point3acres.com/bbs/forum.p
hp?mod=viewthread&tid=630730&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3086%5D%5Bvalue%5D%3D10%26searchoption%5B3086%5D%5Btype%5D%3Dradio%26searchoption%5B3087%5D%5Bvalue%5D%3D2%26searchoption%5B3087%5D%5Btype%5D%3Dradio%26searchoption%5B3088%5D%5Bvalue%5D%3D1%26searchoption%5B3088%5D%5Btype%5D%3Dradio%26searchoption%5B3090%5D%5Bvalue%5D%3D1%26searchoption%5B3090%5D%5Btype%5D%3Dradio%26searchoption%5B3046%5D%5Bvalue%5D%3D4%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311%26orderby%3Ddateline

LE_200_Number_Of_Islands


#
利口原题：两个排序数组，返回kth smallest
Kth_Smallest_In_Two_Sorted_Array

#
给了一堆node，每个node里面可能是个children node list，也可能是个string。输出所有这个图里面的string。
还好不难，dfs就完事了。
LE_339_Nested_List_Weight_Sum

#
给你一个段落，放进一个固定宽度的doc，问需要多少行，利口原题。秒了之后问，如果这个段落非常大，放不进memory怎么办。
需要知道每个字符占多少内存，给定一台机器的内存，问需要多少台机器，如果需要多台，怎么load balance
LE_68_Text_Justification
418. Sentence Screen Fitting
Text_Wrap_Number_Of_Lines

LE_151_Reverse_Words_In_A_String

#
AMP组店面 实现car registry的put, get方法void put(@nonnull String manufacturing, @nonnull String color, @nonnull String model, @nonnull String vehicleId);
String[] get(@nullable String manufact
\][poi  vbnm,ASD    uring, @nullable String color, @nullable String model) -> return 符合条件的vehicleId array
只要求 get O(1), put不做要求， space complexity不做要求
又问了java的hashmap实现细节，以及如果给你一个class，你只override了Hashcode()没有override equals() / 只override equals()没override Hashcode()各会出现什么问题

#
二叉树cascade删除所有值为给定target的叶子节点；
LE_1110_Delete_Nodes_And_Return_Forest ??

给两个日期求差多少天
LE_1360_Number_Of_Days_Between_Two_Dates

#
system design反馈较差，跟VC有关，而且apple的system design路子和FB/Google不一样，似乎有确定答案，面试官在一直忘确定答案上引导，
而不是面试者drive：知识图谱数据库设计，网上商城怎么设计，log系统如何找到一个timestamp到另一个timestamp间所有记录等；


LE_269_Alien_Dictionary

#
rotate the metric in 90 degree
metric 不一定是square 所以无法直接做 in memory rotate
那感觉更简单了

#
给两个list<String>, 一个input, 一个dictionary
    inputs <- ["listen", "oof", "foo"]
    dictionary <- ["silent", "foo", "oof"]
输出是{listen : {silent}, oof: {foo, oof}, foo: {foo, oof}}
LE_49_Group_Anagrams

#L Group
clickstream 问题。给一串log，格式如下：
timestamp  userId  sessionId  url

找出最高频长度为3的clickstream。clickstream 按 userId 和 sessionId 聚集。找不到返回空list。

如：
1001  userA  session_a  page1
1002 userB session_k page3
1004 userC session_h page1
1007 userB session_k page3
1010 userA  session_a  page3
1011 userB session_k page7
1012 userA session_a page7
1014 userA session_a page9
1016 userC session_h page3
1018 userC session_h page7

(userA, session_a): page 1 -> 3 -> 7 -> 9
(userB, session_k): page 3 -> 7
(userB, session_p): page 9
(userC, session_h): page 1 -> 3 -> 7

page 1 -> 3 -> 7 为最高频，返回。


我的做法就是先 Map<userId + sessionId, list of pages by timestamp order>
然后Map<clickstream with length 3, count>。 key 是string，就把三个url用空格连起来。

follow-up:
clickstream of k ?
大数据 ？


#
一个arr 只有0， 1。count subarray with only 0。
如：
arr = [1, 0, 1, 0, 0, 0]
subarray with only 0: [0]  [0]  [0]  [0]  [0,0]  [0,0]  [0,0,0]
return 7
subarray这里注意是连续的。对于每个长度为k的全零array，最终结果的增量 就是比k-1的全零array 多了k。
sliding window 走一遍就行。

Count_Zero_Subarray

follow up:
2D array ？
LE_1074_Number_Of_Submatrices_That_Sum_To_Target  with target value as 0

LE_359_Logger_Rate_Limiter
LE_36_Valid_Sudoku
LE_37_Sudoku_Solver

#
电面就出了一道题，给了两个pseudo code API描述有向图，找出图中是否存在环。
DFS
Find_Cycle


