LE_03_Longest_Substring_Without_Repeating_Characters
LE_50_POW (不過變成乘法 然後只能用加法來做)
LE_39_Combination_Sum

LE_322_Coin_Change

LE_103_Binary_Tree_Zigzag_Level_Order_Traversal
LE_281_Zigzag_Iterator

LE_297_Serialize_And_Deserialize_Binary_Tree
LE_428_Serialize_And_Deserialize_Nary_Tree
LE_449_Serialize_And_Deserialize_BST

LE_105_Construct_Binary_Tree_From_Preorder_Inorder
LE_106_Construct_Binary_Tree_From_Postorder_Inorder

LE_168_Excel_Sheet_Column_Title
LE_171_Excel_Sheet_Column_Number

LE_33_Search_In_Rotated_Sorted_Array
LE_81_Search_In_Rotated_Sorted_Array_II
LE_153_Find_Min_In_Rotated_Sorted_Array
LE_154_Find_Min_In_Rotated_Sorted_Array_II
Find_Min_Element_Index_In_Rotated_Sorted_Array

LE_498_Diagonal_Traverse
Print_Matrix_In_Diagonal_Pattern

LE_08_String_To_Integer
LE_65_Valid_Number

LE_07_Reverse_Integer
LE_151_Reverse_Words_In_A_String
LE_186_Reverse_Words_In_String_II
LE_344_Reverse_String
LE_345_Reverse_Vowels_Of_A_String

LE_20_Valid_Parentheses

LE_238_Product_Of_Array_Except_Self

LE_283_Move_Zeroes

LE_387_First_Unique_Character_In_A_String

LE_26_Remove_Dup_From_Sorted_Array
LE_80_Remove_Dup_From_Sorted_Array_II
LE_82_Remove_Dup_From_SortedList_II
LE_83_Remove_Dup_From_SortedList
LE_316_Remove_Duplicate_Letters

LE_349_Intersection_Of_Two_Arrays
LE_350_Intersection_Of_Two_Arrays_II
LE_160_Intersection_Of_Tow_Linked_List
Intersection_Union_Of_K_Sorted_Lists

LE_412_Fizz_Buzz
LE_1195_Fizz_Buzz_Multithreaded

LE_169_Majority_Element
LE_229_Majority_Element_II

LE_88_Merge_Sorted_Array
LE_21_Merge_Two_Sorted_Lists
LE_23_Merge_k_Sorted_Lists

LE_141_Linked_List_Cycle
LE_142_Linked_List_Cycle_II

LE_139_Word_Break
LE_140_Word_Break_II

LE_138_Copy_List_With_Random_Pointer

LE_94_Binary_Tree_Inorder_Traversal
LE_144_Binary_Tree_Preorder_Traversal
LE_145_Binary_Tree_Postorder_Traversal

LI_235_Prime_Factorization
LE_254_Factor_Combinations

LE_174_Dungeon_Game

LE_146_LRU_Cache

LE_155_Min_Stack

LE_287_Find_The_Duplicate_Number  (***)

LE_540_Single_Element_In_A_Sorted_Array (***)

LE_170_Two_Sum_III_Data_Structure_Design

LE_215_Kth_Largest_Element_In_Array

Min_Difference_In_Two_Arrays

LE_679_24_Game

LE_282_Expression_Add_Operators
Given a string of numbers separated by spaces, devise an algorithm to figure out whether or not
you can arrive at 42 with the numbers using only addition, subtraction, and multiplication.
(variation of LE_282_Expression_Add_Operators)

Alice has invented a new card game to play with Bob. Alice made a deck of cards with random values
between 1 and 52. Bob picks 5 cards. Then, he has to rearrange the cards so that by utilizing the
operations plus, minus, or times, the value of the cards reach Alice's favorite number, 42.
More precisely, find operations such that ((((val1 op1 val2) op2 val3) op3 val4) op4 val5) = 42.

Help Bob by writing a program to determine whether it is possible to reach 42 given 5 card values.

For example, Bob picks 5 cards out of the deck containing 60, 1, 3, 5, and 20. Bob rearranges the cards
and supplies four operations, so that 5 * 20 - 60 + 3 - 1 = 42.
Input:
The input consists of five integers on a line, separated by spaces. Each integer V is 0 <= V <= 52.
Output:
Print a line containing "YES" if it is possible to reach the value 42 according to the rules of the game,
or "NO" otherwise.
楼主的解法是用permutation的方法，将所有可能出现的数字排列都遍历一遍，每次遍历的时候分别进行四则运算，
并将四个结果分别传入下一层。层数等于5的时候，检查结果是否为42.了。

#Graph BFS
https://www.geeksforgeeks.org/shortest-path-unweighted-graph/

#Finding the middle of an array without knowing the length.
https://stackoverflow.com/questions/7862163/finding-the-middle-of-an-array-without-knowing-the-length

LE_394_Decode_String
LE_726_Number_Of_Atoms (***)
#Decode a string to find the count of each character’s appearance in the string.

#
RearrangeLinkedList
给一个链表，按某种顺序重新组织：
输入：
1 -> 2 -> 3 -> 4 -> 5 -> 6
输出：
1 -> 6 -> 2 -> 5 -> 3 -> 4
输入：
1 -> 2 -> 3
输出：
1 -> 3 -> 2
https://www.geeksforgeeks.org/rearrange-a-given-linked-list-in-place/

#
LE_1064_Fixed_Point
https://www.geeksforgeeks.org/find-a-fixed-point-in-a-given-array/
https://www.geeksforgeeks.org/find-fixed-point-value-equal-index-given-array-duplicates-allowed/

Find_A_Fixed_Point_With_Duplicates
给一个有序的数组，可能有重复元素(!!!)，找index 和值相等的第一个元素。
输入：
index: 0 1 2 3 4 5 6 7 8 9
value: 1 2 3 3 3 3 4 8 9 9
输出：3
输入：
index: 0 1 2
value: 3 3 3
输出：-1
我做的磕磕巴巴的，对方hint了好几次。。。还好最后写出来了。 要用一些二分的思想，然后要用递归。还一个比较tricky 的地方是，
在查看 arr[mid] 的时候， 下一个可以从 arr[arr[mid]] 作为边界，这样有机会少判断一些（相比于arr[mid-1] 和 arr[mid+1]）。

#Sweep Line + TreepMap
LE_252_Meeting_Rooms
LE_253_Meeting_Rooms_II
LE_729_My_Calendar_I
LE_731_My_Calendar_II
LE_732_My_Calendar_III

LE_19_Remove_Nth_Node_From_End_Of_List

输入一个List<Line>和n， Line有起点，有终点，比如说(1,10)和(2,8)， 1和10之间有线，2和8之间有线，所以2和8这个区间就有两条线，
求线数大于等于n的区间

#Closest Points
LI_612_K_Closest_Points
LE_973_K_Closest_Points_To_Origin
K_Closest_Points_To_A_Given_Point
有一个vector of locations，请你写一个algorithm，得到离你最近的五个location，用priority queue就可以了，不是很难

#
LE_706_Design_HashMap
implement a hashmap，只需要implement put() 和 hash() , 不用get()
注意key和value都是string，所以要自己implement string 的hash function

#
在 Array 里面求５个数乘积最大。
没啥算法，就是模拟法　５个最大正数　２个最小负数×３个最大正数　　４个最小负数×１个最大正数　　里面挑一个最大。
不要排序　扫一遍数据　拿到５个最大正数　４个最小负数　然后比较就行

LE_867_Transpose_Matrix

1. 给一个binary tree, 写一个function看是不是一个binary search tree(left < root, root <= right)
LE_98_Validate_BST

2. 类似LC 103但是是用N-ary tree做 ＆
LE_103_Binary_Tree_Zigzag_Level_Order_Traversal

find the largest and second largest element in an int array.

Boggle Game, 类似LC 2124.
LE_214_Shortest_Palindrome


给一个int array 跟一个数字求哪两个index相加会等于给的数字 ＆
LE_01_Two_Sum

Reverse LinkedList

1. 数据结构，问得非常详细。基本上各种数据结构都问到了，有什么特点，而且要会implement，并实现主要功能；比如hashmap；
2. max stack; implement queue with 2 stacks; implement stack with 2 queues;
LE_716_Max_Stack

3. reverse string using iteration and recursion;
LE_344_Reverse_String

4. given a manager find all its subordinates, given a subordinate find all its supervisors; 应用题一样，给定问题，选用数据结构去解
    follow-up 还有没有别的数据结构可以用？怎么解？比较一下这两个方法，说一下时间和空间的big O;
LE_690_Employee_Importance


5. pow(x, n) 然后假装自己是qa，如何去test这个功能对不对；

总体来说，面试属于容易的级别，但是需要对各种情况有充分的把握，下面是面经：
1. 阿三，英文口音比较好，属于听着一点不费力那种，年纪稍大，幽默（会在面试中开玩笑），在乎CS基础。时长： 1个小时
Question 1: height of binary tree，这题recursive就三行代码加上error checking。
但是三哥很重视基础，问recursive有什么不好，我说call stack会很大。他就问怎样教call stack，我说进入进城之后，程序会保存在程序栈里，如果树很深，会stackoverflow。他说有什么办法解决，我说iterative；然后继续问，为什么iterative会解决stackoverflow的问题，我说因为我们模拟的stack是放在堆里面的，所以这样会比较好。然后写代码。
Question2：remove duplicate from sorted array； 我给了三个思路，hash，bitset，in-place remove（两个指针，copy值然后移动指针就可以）。分别说了优缺点之后，代码写的是in-place removal的。
Question3：给一个TB级别的text file,每行是一个word，让按字母序排序。我给了两个思路，一个是切割外排，一个是map-reduce。分别陈述之后，三哥很开心我能提出map-reduce，我说我做过Hadoop和AWS的相关应用。没写代码。
Question4：这题更无奈，考等差数列之和。。。 给100个数，其中是0-98 但是有一个数字重复了，问我怎么解决。我说先等差数列求和，然后顺次加element得出一个和，两个和相减就可以。代码没写。
Question5：问我最近是否在professional area里有很重要的事情记忆尤甚，或者说让我自己很proud。我说在工作的时候，我的一个优化让软件跑快了三倍，省了近200倍内存。他很开心，问咋弄的，我就描述咋弄的了。
结束之后，三哥很开心，说我会得到通知soon。

2. 阿三，校友，嘿嘿，感觉RP爆棚，能遇到校友面试，还是很幸运的。就问了一道coding题。不过此校友口音异常难以听懂，我往往是听懂几个字猜的，好在在学校做project的时候，跟阿三一起干过活，对口音产生部分免疫。
LE_02_Add_Two_Numbers
Question1：两个list，求和。（跟leetcode唯一不同的是，这两个list都是正序的，所以需要两次reverse返回。）
这题代码偏大，加上注释小50行。 加上时间复杂度空间复杂度分析，小60行。
Follow up：写test case；我就写了6个，大致是处理null，carry处理，长度不一的list处理，正常处理的case；写完之后每次给过一遍程序给他。他还比较满意。
然后问问题结束了今天的面试。

总体感觉，题目不难，跟面经问的不是一个难度；其他的面经有问各种npc和np hard区别，图论啊，java gc如何弄的，multithreading，mutex和信号啥区别神马神马的 我这算水了一次了，期待好消息吧
现在养成写面经攒rp的习惯，希望大家能多提宝贵意见，祝大家早日offer，offer多多。