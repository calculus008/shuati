LE_108_Convert_Sorted_Array_To_BST
LE_109_Convert_Sorted_List_To_BST
LE_114_Flatten_Binary_Tree_To_LinkedList

(****)
LE_157_Read_N_Char_Given_Read4
LE_158_Read_N_Char_Given_Read4_II
Buffered_Read

#DP
LE_91_Decode_Ways
LE_44_Wildcards_Matching
LE_10_Regular_Expression_Matching_2
LE_10_Regular_Expression_Matching      楼主上来就说要用DP. 结果面试官问了Recursive和DP两个思路. 重点问了为什么a和c.*a是match的.
                                       问了两种思路的计算顺序, 时间复杂度. 然后写程序. 最后自己写test 测试.
                                       楼主建议面试前先在codepad写一题,自己编译一下.  面试前自己先想好test case.

                                       a和c.*a 是不match的，是不是要说"a"和".*a"是match的？

                                       对.
                                       “a“和".*a"是match的.
                                       a和c.*a 是不match的.


#Sliding Window
LE_76_Minimum_Window_Substring
LE_239_Sliding_Window_Maximum
LE_1004_Max_Consecutive_Ones_III

Dependency_Resolver

LE_735_Asteroid_Collision          (*****) 变种， 每次撞过之后，小的会爆炸，大的的尺寸会变成大的减去小的，感觉比leetcode上的还好做一些...
                                   space station 在右边 How many asteroids will hit station。 同时要求O(1) space solution
                                   space station 在最右侧， 问题是最后有多少小行星会撞击space station. eg 如果是一直向左飞的话就不
                                   会撞击

                                   原题是还剩多少asteroid
                                   而这题是最后撞到右边的有多少； 原题中飞向左边的就算存活下来了 因为不是飞向右边所以也不能算

Asteroid_Collision_Variation
Matrix_Transform

LE_238_Product_Of_Array_Except_Self   (***)   先说了除没法handle有0的情况，然而面试官说可以先写除的，写完之后写了乘的，
                                              然后面试官说乘法cost也很大，要减少用乘的，最后优化成单独记录0的位置

                                      尔伞霸 几种写法最好都写，从最简单的开始，要考虑edge case，要跑代码
Product_Of_Array_Except_Self

LE_279_Perfect_Squares

LE_981_Time_Based_Key_Value_Store      (*****) 上机题，变形。
                                       第四题描述有一点不一样（把 timestamp 换成 version），code完全可以通用

LE_73_Set_Matrix_Zero

LE_17_Letter_Combinations_Of_A_Phone_Number
Map_Digit_To_Letter

LE_140_Word_Break_II

LE_281_Zigzag_Iterator

LE_88_Merge_Sorted_Array
LI_486_Merge_K_Sorted_Arrays

LE_160_Intersection_Of_Tow_Linked_List
LE_349_Intersection_Of_Two_Arrays
LE_350_Intersection_Of_Two_Arrays_II
Common_Numbers_In_Two_Arrays

LE_986_Interval_List_Intersections
LI_793_Intersection_Of_Arrays             use PriorityQueue, optimal in space

LE_78_Subsets                     但是是str 不是int
LE_90_Subsets_II


#
LE_365_Water_And_Jug_Problem
Water_And_Jug

LE_269_Alien_Dictionary         让我写了拓扑排序的部分，dfs的部分就不写了

=====================

LE_200_Number_Of_Islands            Follow up : 如果上下边界联通，左右边界联通，问有几个岛
LE_694_Number_Of_Distinct_Islands


#Design
LE_146_LRU_Cache
LE_716_Max_Stack
LE_155_Min_Stack                       先想了下解法，跟面试官交流了思路，确认后开始写。 准备写test case时候自己发现有bug 修了
                                       简单写了几个test cases 确认无误后面试官说可以优化下代码，从之。
                                       第一题比较顺利写完，最后还问了我要怎么简洁的解释这个解法。之后还有15分钟左右。


LE_35_Search_For_Insertion_Point
LE_42_Trapping_Rain_Water
LE_54_Spiral_Matrix
LE_63_Unique_Path_II
LE_68_Text_Justification

LE_127_Word_Ladder

LE_128_Longest_Consecutive_Sequence
LE_173_Binary_Search_Tree_Iterator
LE_426_Convert_Binary_Search_Tree_To_Sorted_Doubly_Linked_List
LE_333_Largest_BST_Subtree                 (***)
LE_501_Find_Mode_In_Binary_Search_Tree
LE_671_Second_Minimum_Node_In_A_Binary_Tree


LE_251_Flatten_2D_Vector                   (***)
LE_341_Flatten_Nested_List_Iterator
LE_283_Move_Zeroes
LE_347_Top_K_Frequent_Elements
LE_415_Add_Strings
LE_642_Design_Search_Autocomplete_System          (上机）
LE_759_Employee_Free_Time
LE_935_Knight_Dialer

LE_212_Word_Search_II


LE_287_Find_The_Duplicate_Number
LE_442_Find_All_Duplicates_In_An_Array
LE_1060_Missing_Element_In_Sorted_Array    (****)

LE_304_Range_Sum_Query_2D_Immutable
LE_20_Valid_Parentheses
LE_22_Generate_Parentheses
LE_23_Merge_k_Sorted_Lists
LE_48_Rotate_Image

----------------------------
LE_24_Swap_Nodes_In_Pairs
LE_69_Sqrt
LE_88_Merge_Sorted_Array
LE_121_Best_Time_To_Buy_And_Sell_Stock
LE_162_Find_Peak_Element
LE_443_String_Compression                   (***)  run-length, in-place

LE_981_Time_Based_Key_Value_Store            Map<String, TreeMap<Integer, String>> map
LE_1094_Car_Pooling                         (***)  sweep line variation