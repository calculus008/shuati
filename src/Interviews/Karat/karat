/*
https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=464099&highlight=karat
 
## Abstraction
Abstraction is selecting data from a larger pool to show only the relevant details to the object.
It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using
Abstract classes and interfaces.
 
## Composition vs Inheritance
Inheritance and Composition provides code reusablility, main difference between Composition and
Inheritance in Java is that Composition allows reuse of code without extending it but for Inheritance
you must extend the class for any reuse of code or functionality.
 
When you use Inheritance, you have to define which class you are extending in code, it cannot be changed
at runtime, but with Composition you just define a Type which you want to use, which can hold its different
implementation.
 
with Inheritance you can only extend one class, which means you code can only reuse just one class, not more
than one. If you want to leverage functionalities from multiple class, you must use Composition.
 
Though both Inheritance and Composition allows code reuse, Inheritance breaks encapsulation because in case
of Inheritance, subclass is dependent upon super class behavior.
 
## Dependency Injection
A technique whereby one object supplies the dependencies of another object. A dependency is an object that
can be used (a service). An injection is the passing of a dependency to a dependent object (a client)
that would use it.
*/


import java.util.*;
public class Indeed {
    public static void main(String[] args) {
        String s1 = "a";
        String s2 = "a";
 
        //System.out.println(longestCommonSubstring(s1, s2));
        //treePairs(new int[][]{{1, 3}, {2, 3}, {3, 6}, {5, 6}, {5, 7}, {4, 5}, {4, 8}, {8, 9}});
 
        /*
        rectangle(new int[][] {
            { 0, 0, 0 },
            { 1, 1, 1 },
            { 1, 1, 1 },
        });
        */
        /*
        rectangle2(new int[][] {
            { 0, 0, 0 },
            { 1, 1, 1 },
            { 1, 1, 0 },
        });
        */
        rectangle3(new int[][] {
            { 0, 0, 0 },
            { 0, 0, 0 },
            { 0, 1, 0 },
        });
 
        //System.out.println(calculator("a+(2+3)-b+test-1"));
 
        System.out.println(removeComma(new ArrayList<String>(Arrays.asList(
            "200,google.com",
            "50,english.org",
            "5,my.english.org"
        ))));
    }
 
    public static List<String> removeComma(List<String> strs) {
        List<String> res = new ArrayList<>();
        if (strs == null || strs.size() == 0) {
            return res;
        }
 
        Map<String, Integer> map = new HashMap<>();
        for (String str : strs) {
            String[] s = str.split(",");
            addStrToMap(map, Integer.valueOf(s[0]), s[1]);
        }
 
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            String temp = entry.getValue() + " " + entry.getKey();
            res.add(temp);
            System.out.println(temp);
        }
        return res;
    }
 
    private static void addStrToMap(Map<String, Integer> map, int count, String s) {
        map.put(s, count + map.getOrDefault(s, 0));
 
        int dotIndex = s.indexOf(".");
        while (dotIndex != -1) {
            s = s.substring(dotIndex + 1);
            map.put(s, count + map.getOrDefault(s, 0));
 
            dotIndex = s.indexOf(".");
        }
    }
 
    public static String longestCommonSubstring(String s1, String s2) {
        if (s1 == null || s1.length() == 0) {
            return "";
        }
 
        if (s2 == null || s2.length() == 0) {
            return "";
        }
 
        int m = s1.length();
        int n = s2.length();
        int[][] dp = new int[m + 1][n + 1];
 
        int length = 0;
        int row = 0, col = 0;
 
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (s1.charAt(i - 1) != s2.charAt(j - 1)) {
                    dp[i][j] = 0;
                } else {
                    dp[i][j] = dp[i-1][j-1] + 1;
                    if (length < dp[i][j]) {
                        length = dp[i][j];
                        row = i-1;
                        col = j-1;
                    }
                }
            }
        }
 
        for (int i = 0; i <= m; i++) {
            System.out.println(Arrays.toString(dp[i]));
        }
 
        StringBuilder sb = new StringBuilder();
        while (length > 0) {
            sb.append(s1.charAt(row));
            row--;
            col--;
            length--;
        }
 
        return sb.reverse().toString();
    }
 
    public static int duplicateInt(int[] nums) {
        int num1 = nums[0];
        int num2 = num1-1;
 
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != num1) {
                return num1;
            } else {
                num2 = nums[i];
            }
        }
 
        return num2;
    }
 
    public static void treePairs(int[][] pairs) {
        Map<Integer, Set<Integer>> map = new HashMap<>();
        for (int[] pair : pairs) {
            // parent
            if (!map.containsKey(pair[0])) {
                map.put(pair[0], new HashSet<Integer>());
            }
 
            // child
            Set<Integer> childSet = map.containsKey(pair[1]) ? map.get(pair[1]) : new HashSet<Integer>();
            childSet.add(pair[0]);
            map.put(pair[1], childSet);
        }
 
        List<Integer> parent = new ArrayList<Integer>();
        List<Integer> children = new ArrayList<Integer>();
        for (Map.Entry<Integer, Set<Integer>> entry : map.entrySet()) {
            if (entry.getValue().size() == 0) {
                parent.add(entry.getKey());
            }
            if (entry.getValue().size() == 1) {
                children.add(entry.getKey());
            }
        }
 
        System.out.println(parent.toString());
        System.out.println(children.toString());
    }
 
    public static void rectangle(int[][] nums) {
        int[] topLeft = new int[2];
        int[] bottomRight = new int[2];
 
        if (nums == null || nums.length == 0 || nums[0].length == 0) {
            return;
        }
 
        int m = nums.length;
        int n = nums[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (nums[i][j] == 0) {
                    findPoint(nums, i, j, topLeft, bottomRight);
 
                    System.out.println(topLeft[0] + " " + topLeft[1]);
                    System.out.println(bottomRight[0] + " " + bottomRight[1]);
                    break;
                }
            }
        }
    }
 
    private static void findPoint(int[][] nums, int row, int col, int[] topLeft, int[] bottomRight) {
        if (row < 0 || row >= nums.length || col < 0 || col >= nums[0].length || nums[row][col] != 0) {
            return;
        }
 
        if (nums[row][col] == 0) {
            nums[row][col] = 2;
 
            topLeft[0] = Math.min(topLeft[0], row);
            topLeft[1] = Math.min(topLeft[1], col);
            bottomRight[0] = Math.max(bottomRight[0], row);
            bottomRight[1] = Math.max(bottomRight[1], col);
 
            findPoint(nums, row - 1, col, topLeft, bottomRight);
            findPoint(nums, row + 1, col, topLeft, bottomRight);
            findPoint(nums, row, col - 1, topLeft, bottomRight);
            findPoint(nums, row, col + 1, topLeft, bottomRight);
 
            nums[row][col] = 0;
        }
    }
 
    public static void rectangle2(int[][] nums) {
        List<List<int[]>> res = new ArrayList<>();
 
        if (nums == null || nums.length == 0 || nums[0].length == 0) {
            return;
        }
 
        int m = nums.length;
        int n = nums[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (nums[i][j] == 0) {
                    int[] topLeft = new int[] { i, j };
                    int[] bottomRight = new int[] { i, j };
 
                    findPoint2(nums, i, j, topLeft, bottomRight);
                    print(nums);
 
                    System.out.println(topLeft[0] + " " + topLeft[1]);
                    System.out.println(bottomRight[0] + " " + bottomRight[1]);
                    System.out.println("---------");
                }
            }
        }
 
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (nums[i][j] == 2) {
                    nums[i][j] = 0;
                }
            }
            System.out.println(Arrays.toString(nums[i]));
        }
    }
 
    private static void print(int[][] nums) {
        for (int i = 0; i < nums.length; i++) {
            System.out.println(Arrays.toString(nums[i]));
        }
    }
 
    private static void findPoint2(int[][] nums, int row, int col, int[] topLeft, int[] bottomRight) {
        if (row < 0 || row >= nums.length || col < 0 || col >= nums[0].length || nums[row][col] != 0) {
            return;
        }
 
        if (nums[row][col] == 0) {
            nums[row][col] = 2;
 
            topLeft[0] = Math.min(topLeft[0], row);
            topLeft[1] = Math.min(topLeft[1], col);
            bottomRight[0] = Math.max(bottomRight[0], row);
            bottomRight[1] = Math.max(bottomRight[1], col);
 
            findPoint2(nums, row - 1, col, topLeft, bottomRight);
            findPoint2(nums, row + 1, col, topLeft, bottomRight);
            findPoint2(nums, row, col - 1, topLeft, bottomRight);
            findPoint2(nums, row, col + 1, topLeft, bottomRight);
        }
    }
 
    public static void rectangle3(int[][] nums) {
        List<List<int[]>> res = new ArrayList<>();
 
        if (nums == null || nums.length == 0 || nums[0].length == 0) {
            return;
        }
 
        int m = nums.length;
        int n = nums[0].length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (nums[i][j] == 0) {
                    List<int[]> temp = new ArrayList<>();
                    findPoint3(nums, i, j, temp);
                    res.add(temp);
                }
            }
        }
 
        printList(res);
 
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (nums[i][j] == 2) {
                    nums[i][j] = 0;
                }
            }
            System.out.println(Arrays.toString(nums[i]));
        }
    }
    private static void printList(List<List<int[]>> res) {
        for (List<int[]> list : res) {
            for (int[] point : list) {
                System.out.print(point[0] + " " + point[1] + "    ");
            }
            System.out.println("");
        }
    }
 
    public static void findPoint3(int[][] nums, int row, int col, List<int[]> temp) {
        if (row < 0 || row >= nums.length || col < 0 || col >= nums[0].length || nums[row][col] != 0) {
            return;
        }
 
        if (nums[row][col] == 0) {
            nums[row][col] = 2;
 
            temp.add(new int[] {row, col});
            findPoint3(nums, row - 1, col, temp);
            findPoint3(nums, row + 1, col, temp);
            findPoint3(nums, row, col - 1, temp);
            findPoint3(nums, row, col + 1, temp);
        }
    }
 
    public static int calculator(String s) {
        if (s == null || s.length() == 0) {
            return -1;
        }
 
        Map<String, Integer> map = new HashMap<>();
        map.put("a", 1);
        map.put("b", 2);
        map.put("c", 3);
        map.put("test", 100);
 
 
        Stack<Integer> stack = new Stack<Integer>();
        int result = 0;
        int number = 0;
        int sign = 1;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (Character.isDigit(c)) {
                number = 10 * number + (int)(c - '0');
            } else if (c == '+') {
                result += sign * number;
                number = 0;
                sign = 1;
            } else if (c == '-') {
                result += sign * number;
                number = 0;
                sign = -1;
            } else if (c == '(') {
                // push the result and sign
                stack.push(result);
                stack.push(sign);
 
                // reset
                sign = 1;
                result = 0;
            } else if (c == ')') {
                result += sign * number;
                number = 0;
                result *= stack.pop();
                result += stack.pop();
            } else if (Character.isLetter(c)) {
                int j = i+1;
                while (j < s.length() && Character.isLetter(s.charAt(j))) {
                    j++;
                }
 
                String variableName = s.substring(i, j);
                if (map.containsKey(variableName)) {
                    number = map.get(variableName);
                } else {
                    number = 0;
                }
 
                i = j-1;
            }
        }
 
        if (number != 0) {
            result += sign * number;
        }
 
        //System.out.print(result);
        return result;
    }
 
 
    public static void createAutoComplete(String[] strs) {
        TrieNode trie = createTrie(strs);
    }
 
    public static List<String> lookup(String s, TrieNode trie) {
        TrieNode node = trie;
        List<String> res = new ArrayList<>();;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (ch >= 'A' && ch <= 'Z') {
                if (node != null && node.next[ch - 'A'] != null) {
                    node = node.next[ch - 'A'];
                    res = node.words;
                }
            }
        }
 
        return res;
    }
    private void printListStrign(List<String> list) {
        for (String str : list) {
            System.out.println(str);
        }
    }
 
    public static TrieNode createTrie(String[] strs) {
        TrieNode root = new TrieNode();
        TrieNode node = root;
        for (String str : strs) {
            node = root;
            for (int i = 0; i < str.length(); i++) {
                Character ch = str.charAt(i);
                Character currentUpper = '#';
                if (ch >= 'A' || ch <= 'Z') {
                    node.next[ch - 'A'] = new TrieNode();
                    node = node.next[ch - 'A'];
                    node.words.add(str);
                }
            }
        }
        return root;
    }
}
 
class TrieNode {
    List<String> words;
    TrieNode[] next;
    TrieNode() {
        next = new TrieNode[26];
        words = new ArrayList<String>();
    }
}