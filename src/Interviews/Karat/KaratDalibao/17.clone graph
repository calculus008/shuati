package Interviews.Karat.KaratDalibao;

/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
// bfs
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        Queue<UndirectedGraphNode> candidates = new LinkedList<>();
        Map<Integer, UndirectedGraphNode> finished = new HashMap<>();
        if(node == null) return null;
        UndirectedGraphNode clone = new UndirectedGraphNode(node.label);
        candidates.offer(node);
        finished.put(clone.label, clone);
        while(!candidates.isEmpty()) {
            UndirectedGraphNode temp = candidates.poll();
            UndirectedGraphNode correspond = finished.get(temp.label);
            for(UndirectedGraphNode neighbor: temp.neighbors) {
                if(!finished.containsKey(neighbor.label)) {
                    finished.put(neighbor.label, new UndirectedGraphNode(neighbor.label));
                    candidates.offer(neighbor);
                }
                correspond.neighbors.add(finished.get(neighbor.label));
            } 
        }
        return clone;
    }
}


// 3ms 98%
// dfs
public class Solution {
    private HashMap<Integer, UndirectedGraphNode> map = new HashMap<>();
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        return clone(node);
    }

    private UndirectedGraphNode clone(UndirectedGraphNode node) {
        if (node == null) return null;
        
        if (map.containsKey(node.label)) {
            return map.get(node.label);
        }
        UndirectedGraphNode clone = new UndirectedGraphNode(node.label);
        map.put(clone.label, clone);
        for (UndirectedGraphNode neighbor : node.neighbors) {
            clone.neighbors.add(clone(neighbor));
        }
        return clone;
    }
}