3.bug free 要求高

#1
第一题: 是给一个list，一个entry是 一个学生id对应一个课程，要求输出每两个学生之间的共同课程。就用hashtable过一遍，比较简单。
第二题: 是给一个list，一个entry是 一个前置课程和当前课程，包含了所有的课程，要求输出中间的课程。这个用doublu linked list 串起来，
       然后拿到head后用slow fast pointer找到list的中间点就好了，也是比较简单。但是我当时比较慌一下时间就结束了。。。
#2
第一题: 是要求把尽量多的词用‘-’串起来，但要求长度在某个数之内。我的主要时间就卡在了这道题，在最后5分钟做出来了，哎，手太生疏了。。。
      要想清楚需要维护的变量是什么就会很简单。。
第二题: 就是基于第一题把给的句子拆开，然后再用类似task schedule的方式逐一插入‘-’直到达到最大长度。。
(楼主能详细说一下redo的两道题吗，第一题的意思是说给一串word,然后尽可能多的把这些word用'-'串起来但是长度不能超过某个给定值得意思吗？
 第二题的意思是说给定一个max_length, 把第一题中所有的word按顺序串起来的意思吗？谢谢！)

#3
算法题：
1. substring count， 这个地里已经有很多解答。 (!!!)
https://www.geeksforgeeks.org/number-substrings-string/

2. 给定一个graph（是一个2D input array），第一问：写一个function返回graph里面只有一个parent的集合，跟没有parent的集合。
   solution ： 2 hashmaps 第二问：给定两个leaf，写一个function判断这两个leaf是不是有共同的parent。solution： BFS

这里要注意的是：
1. 第二题第二问跟第一问关系不大，不要惯性地陷入到第一问的解题中去，我就是看到第二问，觉得在第一问基础上修改即可，浪费了超级多的时间。
2. 第二问不能用DFS，非常不好解

#4
第一题，有个长的string和一个短的string，问长的string有多少substring和短的一样要求不能用embedded function。
就用最笨的方法，从长的string里一个每个位置和短的string比。好像没有什么更好的方法。
第二题，数学理论，不用编程。已知一堆点，每个点有xy坐标，可以是红色或蓝色。给一个新点，怎么判断它的坐标。
扯了些KNN, SVM, logistic regression.
第三题，有一个正整数列，给一个阈值t，求连续子数列的和在不超过t的情况下最多可以是多少。方法不难，两个pointer，
然后往右移，应该可以。但是写的时候由于考虑各种特殊情况（比如所有的数都大于t），bug很多，最后也没改完。小哥一直问问题，
我也没法集中精力找bug。小哥问方法能不能优化，当时没意识到，后来他提醒，应该是说在过程中已经有和是t了就可以直接返回。
剩三分钟的时候让我停下来问问有什么关于公司的问题，我心思都在bug上，随便问了一个问题。
感觉要跪。

#5
http://interviewsource.blogspot.com/
9月19好以后的题目是所有indeed onsite题目

#6
题目都是鸡精（平均+爬虫tab+k个数据流)

#7
第一题 word wrap：给一个word list 和最大的长度，要求把这些word用 - 串联起来，但不能超过最大的长度。
第二题 word processor: 当时有点晕，半天没搞懂题意。。。面试官说可以用第一题的function。
We are building a word processor and we would like to implement a "reflow" functionality that
also applies full justification to the text.

Given an array containing lines of text and a new maximum width, re-flow the text to fit the new
width. Each line should have the exact specified width. If any line is too short, insert '-'
(as stand-ins for spaces) between words as equally as possible until it fits.

Note: we are using '-' instead of spaces between words to make testing and visual verification
of the results easier.


lines = [ "The day began as still as the",
          "night abruptly lighted with",
          "brilliant flame" ]

reflowAndJustify(lines, 24) ... "reflow lines and justify to length 24" =>

        [ "The--day--began-as-still",
          "as--the--night--abruptly",
          "lighted--with--brilliant",
          "flame" ] // <--- a single word on a line is not padded with spac


#8
1. 给你两个user的在某个网站进行的action list, 例如
["start","/account","/notification","/a","/b"],
["start","/a","/b"],
找两个user最长共同连续action list. 如前例应该返回["/a","/b"]

2. 给你一个user_made_purchase_id:[123,345], 一个ad_clicks: [[IP_Address, Time, Ad_Text]],
一个user_id_ip:[IP_Address,User_id]

#
给一个word list比如["I", "am", "so" "sad"], 和最长字符数比如4， 把这些单词用下划线wrap起来输出：
 [“I_am”, "so", "sad"] 保持输出的每个string的长度都小于等于最长字符数。 这一题大家可以看我的答案之前试一试
 ，我的感受是很容易跪在最后一个单词无法输出的情况


#
Karat好好准备不难的，都能找到前辈的面经。都是三道题一套一起出，我总结了一下常见的几套，大家搜一下就搜得到啦。

领域套	每题单独条件	subdomain	lcs	ads conversion rate
会议套	给会议intervals	新会议是否可行	所有空闲时间	给房间容量会议细节，如何安排会议
计算器套	给string算结果	+ - digit	+ - ( ) digit	+ - ( ) variables
学生套	给学生上的课	学生共有课程	给上课顺序，找一个中间课	找所有中间课
宝藏套	给二维矩阵	返回某点邻居	返回某点出发可抵达区域	给起点终点，最短路径获得所有宝藏
矩形套	给二维矩阵	找到一个矩形	找到所有矩形	找到所有连通量


#
题目并没有在面经里见过，都是给定行距做文字line wrapper。第一题是保证词的完整性进行wrap，第二题比较麻烦，需要先在词与词之间加“-”，
如果还有位置再加“--”，最后一行平均分配，在词与词之间加任意多个“-”。
# We are building a word processor and we would like to implement a "word-wrap" functionality.

# Given a maximum number of characters in a line followed by a list of words, return a collection of strings where each string element represents a line that contains as many words as possible, with the words in each line being concatenated with a single '-' (representing a space, but easier to see for testing). The length of each string must not exceed the maximum character length per line.
# Your function should take in the maximum characters per line and return a data structure representing all lines in the indicated max length.
# Note: built-in functions like Python textwrap module should not be used as solutions to this problem.

# Examples:

# words1 = [ "The", "day", "began", "as", "still", "as", "the", "night", "abruptly", "lighted", "with", "brilliant", "flame" ]
# wrapLines(words1, 13) ... "wrap words1 to line length 13" =>
#   [ "The-day-began", "as-still-as", "the-night", "abruptly", "lighted-with", "brilliant", "flame" ]

# wrapLines(words1, 20) ... "wrap words1 to line length 20" =>
#   [ "The-day-began-as", "still-as-the-night", "abruptly-lighted", "with-brilliant-flame" ]

# words2 = [ "Hello" ]
# wrapLines(words2, 5) ... "wrap words2 to line length 5" =>
#   [ "Hello" ]

# words3 = [ "Hello", "world" ]
# wrapLines(words3, 5) ... "wrap words3 to line length 5" =>
#   [ "Hello",  "world" ]

# n = number of words / total characters