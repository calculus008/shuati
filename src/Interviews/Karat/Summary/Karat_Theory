https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=464099&highlight=karat
 
## Abstraction
Abstraction is selecting data from a larger pool to show only the relevant details to the object.
It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using
Abstract classes and interfaces.
 
## Composition vs Inheritance
Inheritance and Composition provides code reusablility, main difference between Composition and
Inheritance in Java is that Composition allows reuse of code without extending it but for Inheritance
you must extend the class for any reuse of code or functionality.
 
When you use Inheritance, you have to define which class you are extending in code, it cannot be changed
at runtime, but with Composition you just define a Type which you want to use, which can hold its different
implementation.
 
with Inheritance you can only extend one class, which means you code can only reuse just one class, not more
than one. If you want to leverage functionalities from multiple class, you must use Composition.
 
Though both Inheritance and Composition allows code reuse, Inheritance breaks encapsulation because in case
of Inheritance, subclass is dependent upon super class behavior.
 
## Dependency Injection
A technique whereby one object supplies the dependencies of another object. A dependency is an object that
can be used (a service). An injection is the passing of a dependency to a dependent object (a client)
that would use it.

#
设计一个新的collections 文档需要注意什么
遇到一些production 的metrics怎么debug什么的。

#
关于OOP两小问
1. 简单描述下composition 跟inheritance 以及他们的区别。
2. 描述下DI(dependence injection) 以及它的优点：（我补充说明了di的缺点。。小哥很认同）
关于testing的问题：
1. 简单描述下mock，要用它理由。
2. 给一个fuction设计unit test cases。
3. 有些CI里面的test suite 很慢，分析原因，并给出解决措施。
3. 设计一个新的类型，文档如何写？跟一般API文档相比，看重的是细节，比如返回数据是否有序，接受input的range，是不是线程safe
  （线程safe我面的时候忘了，现在想起来送给大家）等等


#
product issues的问题：
给一个图，cpu和mem的曲线图，cpu不怎么变，mem越来越高，问可能的问题，怎么trouble shoot
又问了一个thread exhaustion 是什么，怎么解决

OOD的问题：
composition vs inheritence
我看还有人问过 dependency injection

一个系统，一台机器能handle 1 request per second， 问怎么测试，保证系统是scalable，能handle 1000 requests per second

#
1，假如你有一个类似Facebook的应用 用户超级多, 现在需要实时在每个post下显示发post的人有多少好友，如果实现这一功能
2，假如你设计Google doc, 现在有100个server, 每一个文件只能在一个server上被处理，当用户多了以后，会出现什么performance issue？如果解决

#
1.Which Principle that you are using, and why?
2.undo/redo , which data structure is good for this?
3.boolean flag. if you have too much flag, how to store in limited space device? which data structure
  is good for that.
4. how do you do the performance test and load test?


#
1.cpu 不变 memory上升
2.堆栈区别
3.线程耗尽
4.1tps的服务，上1000tps的系统（这纯属扯淡）

system internal
process thread
how they talk
GC shisha
不希望的 GC model

#
200个机器分布式系统  随意有机器在特定时间挂掉 这是为什呢么
给个图 500的error特别起起伏伏 为什么
给个图 系统反应时间特别起起伏伏 为什么

#
1. 两个function: O(m+n) v.s. O(mlogn) 什么情况下前者快，什么情况下后者快
2. 想从一个file中uniformly随机选取一行，能否用“先把file读成bytes后，随机选取一个byte，向前后找到newline，然后选取这行”来实现
3. 第三题不太记得了，好像也是跟complexity有关

#
记得的问题有，best data structure for a specific problem, race condition, why object

#
三个关于production service的：
1.给了我一个图，问我这个图出现了什么问题。CPU不怎么变，Memory飞快上升。
2.如果一台机器线程耗尽了会有什么症状怎么解决。
3.有一个目前承载1tps的服务，怎么来确定它能否承担1000tps的客户请求。

三个关于测试的：
1.什么时候用mock，什么时候不用mock
2.如果一个测试特别慢怎么
3.写了一个最短路径的算法，怎么测试

