https://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=464099&highlight=karat
 
## Abstraction
Abstraction is selecting data from a larger pool to show only the relevant details to the object.
It helps to reduce programming complexity and effort. In Java, abstraction is accomplished using
Abstract classes and interfaces.
 
## Composition vs Inheritance
Inheritance and Composition provides code reusablility, main difference between Composition and
Inheritance in Java is that Composition allows reuse of code without extending it but for Inheritance
you must extend the class for any reuse of code or functionality.
 
When you use Inheritance, you have to define which class you are extending in code, it cannot be changed
at runtime, but with Composition you just define a Type which you want to use, which can hold its different
implementation.
 
with Inheritance you can only extend one class, which means you code can only reuse just one class, not more
than one. If you want to leverage functionalities from multiple class, you must use Composition.
 
Though both Inheritance and Composition allows code reuse, Inheritance breaks encapsulation because in case
of Inheritance, subclass is dependent upon super class behavior.
 
## Dependency Injection
A technique whereby one object supplies the dependencies of another object. A dependency is an object that
can be used (a service). An injection is the passing of a dependency to a dependent object (a client)
that would use it.

#
设计一个新的collections 文档需要注意什么
遇到一些production 的metrics怎么debug什么的。

#
关于OOP两小问
1. 简单描述下composition 跟inheritance 以及他们的区别。
2. 描述下DI(dependence injection) 以及它的优点：（我补充说明了di的缺点。。小哥很认同）
关于testing的问题：
1. 简单描述下mock，要用它理由。
2. 给一个fuction设计unit test cases。
3. 有些CI里面的test suite 很慢，分析原因，并给出解决措施。
3. 设计一个新的类型，文档如何写？跟一般API文档相比，看重的是细节，比如返回数据是否有序，接受input的range，是不是线程safe
  （线程safe我面的时候忘了，现在想起来送给大家）等等


#
product issues的问题：
给一个图，cpu和mem的曲线图，cpu不怎么变，mem越来越高，问可能的问题，怎么trouble shoot
又问了一个thread exhaustion 是什么，怎么解决

OOD的问题：
composition vs inheritence
我看还有人问过 dependency injection

一个系统，一台机器能handle 1 request per second， 问怎么测试，保证系统是scalable，能handle 1000 requests per second

#
1，假如你有一个类似Facebook的应用 用户超级多, 现在需要实时在每个post下显示发post的人有多少好友，如果实现这一功能
2，假如你设计Google doc, 现在有100个server, 每一个文件只能在一个server上被处理，当用户多了以后，会出现什么performance issue？如果解决

#
1.Which Principle that you are using, and why?
  SOLID
  Single Responsibility : A class should only have a single responsibility, that is, only changes to one part of
                          the software's specification should be able to affect the specification of the class
  Open and Close : be open for extension, but closed for modification
  Liskov substitution : Objects in a program should be replaceable with instances of their subtypes without altering
                        the correctness of that program.
  Interface Segregation : Many client-specific interfaces are better than one general-purpose interface
  Depdedence Inversion : depend upon abstractions, [not] concretions

2.undo/redo , which data structure is good for this?
  Stack
  https://www.quora.com/What-kind-of-data-structures-do-undo-and-redo-uses

3.boolean flag. if you have too much flag, how to store in limited space device? which data structure
  is good for that.
4. how do you do the performance test and load test?


#
1.cpu 不变 memory上升
2.堆栈区别
  heap vs stack
  https://gribblelab.org/CBootCamp/7_Memory_Stack_vs_Heap.html
#Stack
very fast access
don't have to explicitly de-allocate variables
space is managed efficiently by CPU, memory will not become fragmented
local variables only
limit on stack size (OS-dependent)
variables cannot be resized
#Heap
variables can be accessed globally
no limit on memory size
(relatively) slower access
no guaranteed efficient use of space, memory may become fragmented over time as blocks of memory are allocated, then freed
you must manage memory (you're in charge of allocating and freeing variables)
variables can be resized using realloc()

3.线程耗尽
4.1tps的服务，上1000tps的系统（这纯属扯淡）

system internal
process thread
how they talk
GC shisha
不希望的 GC model

#
200个机器分布式系统  随意有机器在特定时间挂掉 这是为什呢么
给个图 500的error特别起起伏伏 为什么
给个图 系统反应时间特别起起伏伏 为什么

#
1. 两个function: O(m+n) v.s. O(mlogn) 什么情况下前者快，什么情况下后者快
2. 想从一个file中uniformly随机选取一行，能否用“先把file读成bytes后，随机选取一个byte，向前后找到newline，然后选取这行”来实现
3. 第三题不太记得了，好像也是跟complexity有关

#
记得的问题有，best data structure for a specific problem, race condition, why object

#
三个关于production service的：
1.给了我一个图，问我这个图出现了什么问题。CPU不怎么变，Memory飞快上升。
2.如果一台机器线程耗尽了会有什么症状怎么解决。
3.有一个目前承载1tps的服务，怎么来确定它能否承担1000tps的客户请求。

三个关于测试的：
1.什么时候用mock，什么时候不用mock
2.如果一个测试特别慢怎么
3.写了一个最短路径的算法，怎么测试

#
一上来问了三组关于system design 的问题， 都是口头表述就可以， 不需写code， 都跟fault tolerance， distributed system，
load balance相关的一共大概过了15分钟

#
. Basic questions (Production issue, OOD)
   - graph with ram keep increasing and how to locate the issue
   - how to handle thread poll exhaustion
   - how to test web service QPS when it scale up

   - what's the different between Composition and inhertence
   - what need to be write in javadoc when you creat a new collection class
   - what is dependency injection and how it reduce software complexity


#
然后是五分钟4道问答题，大概就是一些工作场景中的问题。
比如，隔壁组说要想吧release cycle加快到一天一次，该怎么办。
（我答的是那就要实现continuous deployment, 加pipelien,加integration test, 加alarm,加monitors etc.)
再比如，一次release之后200个服务器里总有随机的某一个down，customer又没有complain，这是为啥。
（这个我也不知道怎么答，我说这个得看release里有啥code change,然后才知道）
还有两个是给个图让分析spike的原因，然后怎么debug。这个感觉答的不确定好不好

#
1. 是200个instances 在200太机器上， 有一个随机instance 隔几分钟挂一次， 问可能原因是什么
2. 给一个图是 http response code 的qps， 其中500 有几个spike， 问怎么分析错误原因
3. 给一个图 上面是 不同percentile的latency，其中p99和p90 latency很大，问怎么分析错误原因
4. 问要每天release一次，需要注意哪些问题

#
问题一 database俩table 第一个是 user 第二个是 friends，这个friends table 是单个的case 比如说 user01 和user02 是基友
 那就会有个table id；user01；user02。若use01还有其他朋友 就会有其他table 让我说如何在前端显示时时朋友总数。。。
问题二 有个load balancing system 实现方法基本上就是hashmap，100个机器，让我说用户增多后会出现神马问题，怎么解决。

#
OOP
1) Composition vs Inheritence
2) Depedency Injection
3) 如果向Collection framwork里面加入一个新的class，documentation应该注意什么

#
what is the most important object oriented programming principle for complex system

#
聊个项目
设计模式（singleton啥的）

#
普通编程，
1. 问你什么样的oop属性对程序的模块化有帮助。
2. 他列出一些问题让我选最适合的数据结构， 比如要保存和查询文件用什么最好等， 记不起其他了，列出了五个。
3. 也是数据结构题， 具体忘了。

系统效率呀
1. 给你一个图， cpu 和 memory， 让你判断出了什么问题。
2.系统在一定时间老是挂点， 什么原因。
3. 具体忘了

#
一些基础知识 hashcode vs equal， override vs overwrite，dependency inject && conversion of control，
how to make code scalable，test tactics you often use in your daily work

#
1. what is dependency injection, pros and cons to use it
2. compare composition and inheritance
3. what is mock, why use it, cons
Mock is a method/object that simulates the behavior of a real method/object in controlled ways.
Mock objects are used in unit testing. Often a method under a test calls other external services
or methods within it. These are called dependencies. Once mocked, the dependencies behave the way
we defined them.