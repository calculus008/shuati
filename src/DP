Huahua's Summary
https://zxi.mytechroad.com/blog/dynamic-programming/leetcode-dp-summary/

1.1
Input O(n)
dp[i] : optimal solution for a sub problem (A[1 -> i])
dp[i] only depends on const smaller problem
Time : O(n)
Space : O(n) -> O(1)

Template
dp = new int[n + 1]
for i = 1 to n
 dp[i] = f(dp[n - 1], dp[n - 2],...)
return dp[n]

LE_70_Climbing_Stairs
LE_198_House_Robber
LE_746_Min_Cost_Climbing_Stairs
LE_790_Domino_And_Tromino_Tiling
LE_801_Minimum_Swaps_To_Make_Sequences_Increasing

---------------------------------------------------

LE_926_Flip_String_To_Monotone_Increasing
LE_901_Online_Stock_Span
LE_894_All_Possible_Full_Binary_Trees
LE_898_Bitwise_ORs_Of_Subarrays
LE_873_Length_Of_Longest_Fibonacci_Subsequence
LE_877_Stone_Game
LE_813_Largest_Sum_Of_Averages
LE_712_Minimum_ASCII_Delete_Sum_For_Two_Strings
LE_115_Distinct_Subsequences
879
546
LE_576_Out_Of_Boundary_Paths
LE_688_Knight_Probability_In_Chessboard